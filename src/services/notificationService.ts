import { db } from '../firebase'
import { collection, addDoc, serverTimestamp, query, orderBy, onSnapshot, Timestamp } from 'firebase/firestore'

export interface Notification {
  id: string // Firestore document ID
  type: 'chapter_read' // Add other types later if needed
  fromUserId: string
  chapterId?: string // Optional, depending on notification type
  message: string
  createdAt: Date | any // Firestore timestamp
  isRead: boolean
}

/**
 * Send a notification to a specific user.
 */
export const sendNotification = async (
  toUserId: string,
  // Exclude fields generated by Firestore or set automatically
  notificationData: Omit<Notification, 'id' | 'createdAt' | 'isRead'>
) => {
  const notificationsRef = collection(db, 'users', toUserId, 'notifications')
  await addDoc(notificationsRef, {
    ...notificationData,
    createdAt: serverTimestamp(),
    isRead: false, // Notifications start as unread
  })
}

/**
 * Listen for notifications for a specific user, ordered by creation time.
 */
export const listenNotifications = (
  userId: string,
  callback: (notifications: Notification[]) => void
) => {
  const notificationsRef = collection(db, 'users', userId, 'notifications')
  const q = query(notificationsRef, orderBy('createdAt', 'desc')) // Order by newest first

  return onSnapshot(q, (snapshot) => {
    const notifications = snapshot.docs.map((docSnap) => {
      const data = docSnap.data()
      // Ensure createdAt is a Date object
      const createdAt = data.createdAt instanceof Timestamp 
                        ? data.createdAt.toDate() 
                        : new Date() // Fallback if timestamp is missing or invalid

      // Explicitly construct the Notification object for type safety
      const notification: Notification = {
        id: docSnap.id,
        type: data.type || 'unknown', // Provide default/fallback values if needed
        fromUserId: data.fromUserId || '',
        chapterId: data.chapterId, // chapterId is optional
        message: data.message || 'No message',
        isRead: data.isRead === true, // Ensure boolean
        createdAt: createdAt,
      }
      return notification
    })
    callback(notifications)
  })
}
