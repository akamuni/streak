rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User profile rules
    match /users/{userId} {
      // Allow user to read/write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow any authenticated user to read any profile (for friend lists, search, etc.)
      allow get: if request.auth != null;
    }

    // Rules for user's read chapters
    match /users/{userId}/readChapters/{chapterId} {
      // Allow owner to read/write
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow any authenticated user to read (for friend streak comparison)
      allow list, get: if request.auth != null;
    }

    // Rules for user's cheat days
    match /users/{userId}/cheatDays/{dayId} {
      // Allow owner to read/write
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow any authenticated user to read (if needed for friend comparison - adjust if not)
      allow list, get: if request.auth != null; 
    }

    // Rules for user's friends list (assuming this path)
    match /users/{userId}/friends/{friendId} {
        // Allow owner to read their own friend list
        allow read: if request.auth != null && request.auth.uid == userId;
        // Allow owner to manage friends OR allow the other user to write/delete their own entry
        allow write, delete: if request.auth != null && 
                               (request.auth.uid == userId || request.auth.uid == friendId);
    }

    // Rules for incoming friend requests
    match /users/{userId}/incomingRequests/{senderId} {
        // Allow owner (receiver) to read/delete requests
        allow read, delete: if request.auth != null && request.auth.uid == userId;
        // Allow sender to create the request
        allow create: if request.auth != null && request.auth.uid == senderId;
        // (Update not needed, only create/delete)
    }

    // Rules for outgoing friend requests
    match /users/{userId}/outgoingRequests/{receiverId} {
        // Owner manages their outgoing requests
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for conversation messages
    match /conversations/{convoId}/messages/{messageId} {
      // Allow read/write only if the user is part of the conversation
      // (convoId is formed by joining the sorted UIDs: uid1_uid2)
      allow read, write: if request.auth != null && 
                           request.auth.uid in convoId.split('_');
    }

    // Rules for Rooms
    match /rooms/{roomId} {
      // Allow any authenticated user to create a room
      allow create: if request.auth != null;
      // Allow any authenticated user to read room details (needed for queries/listening)
      allow read: if request.auth != null;
      // Allow any authenticated user to update (e.g., join by adding to members array)
      allow update: if request.auth != null;
      // (Delete might need specific rules, e.g., only creator/admin, not added yet)
    }

    // Rules for Notifications
    match /users/{userId}/notifications/{notificationId} {
      // Allow any authenticated user to create (send) a notification to someone
      allow create: if request.auth != null;
      // Allow the owner to read/delete their own notifications
      allow read, delete: if request.auth != null && request.auth.uid == userId;
      // (Update might be needed if 'isRead' is updated directly, not added yet)
    }

    // Rules for Groups
    match /groups/{groupId} {
      // Allow any authenticated user to read groups
      allow read: if request.auth != null;
      // Allow any authenticated user to create a group
      allow create: if request.auth != null;
      // Allow any authenticated user to update when joining a group
      allow update: if request.auth != null;
      // Allow delete only for group creator or members with admin role
      allow delete: if request.auth != null && 
                    (request.auth.uid == resource.data.createdBy || 
                    (request.auth.uid in resource.data.members && 
                    resource.data.members[request.auth.uid].role == 'admin'));

      // Rules for the messages subcollection
      match /messages/{messageId} {
        // Allow members to read
        allow read: if request.auth != null
                    && get(/databases/$(database)/documents/groups/$(groupId)).data.members[request.auth.uid] != null;

        // Allow members to create (using get() to check parent group membership)
        allow create: if request.auth != null
                      && get(/databases/$(database)/documents/groups/$(groupId)).data.members[request.auth.uid] != null;

        // Allow members to update reactions, or sender to update content
        allow update: if request.auth != null
                      && get(/databases/$(database)/documents/groups/$(groupId)).data.members[request.auth.uid] != null
                      && (request.resource.data.keys().hasOnly(["reactions"]) || request.auth.uid == resource.data.senderId);

        // Only sender can delete
        allow delete: if request.auth != null && request.auth.uid == resource.data.senderId;
      }
    }

    // Deny all other document access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}